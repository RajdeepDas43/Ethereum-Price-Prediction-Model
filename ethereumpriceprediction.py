# -*- coding: utf-8 -*-
"""EthereumPricePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Igi82IuyN2KnhZQcWa_xLxcadCKECQ8
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install yfinance

import pandas as pd
import numpy as np
# %matplotlib inline
import matplotlib.pyplot as plt
import datetime
import yfinance as yf

start = datetime.datetime(2015, 1, 1)
end = datetime.datetime(2021, 1, 1)  # Adjust the end date as needed

df = yf.download("ETH-USD", start=start, end=end)

train=df.iloc[:1120]
test=df[1120:]

train.columns

y_train=train.drop(['High','Low','Open','Volume','Adj Close'],axis=1).values

X_train=np.arange(0,1120).reshape(-1,1)

len(X_train)==len(y_train)

"""1. Linear Regression

"""

from sklearn.linear_model import LinearRegression

model=LinearRegression()
### Fit/Train on the training data

model.fit(X_train,y_train)

"""

*   For prediction on test data

"""

y_test=test.drop(['High','Low','Open','Volume','Adj Close'],axis=1).values
X_test=np.arange(0,29).reshape(-1,1)
preds=model.predict(X_test)
test['preds']=preds

from sklearn.metrics import mean_absolute_error

test

linear_regression_test_error=mean_absolute_error(test['Close'],test['preds'])**0.5

"""

*   To plot a graph for test data prediction results
*   For prediction on training data

"""

test=test.drop(['High','Low','Open','Volume','Adj Close'],axis=1)
test.plot()

preds=model.predict(X_train)
train['preds']=preds

"""

*   To plot price for Closing, 1 month-SMA and 2 weeks- SMA
*   To plot price for Closing, and EWMA12

"""

train=df.iloc[:754]
test=df.iloc[754:]
df=df.drop(['High','Low','Open','Volume','Adj Close'],axis=1)

df['1month-SMA']=df['Close'].rolling(window=30).mean()
df['2week-SMA']=df['Close'].rolling(window=14).mean()

df.head(15)

df.plot()

df['EWMA12']=df['Close'].ewm(span=14,adjust=False).mean()
df[['Close','EWMA12']].plot()

"""2. Exponential Smoothing"""

from statsmodels.tsa.holtwinters import SimpleExpSmoothing

span=14
alpha=2/(span+1)
df['EWMA14']=df['Close'].ewm(alpha=alpha,adjust=False).mean()
df['SES14']=SimpleExpSmoothing(df['Close']).fit(smoothing_level=alpha,optimized=False).fittedvalues.shift(-1)
df.head()

"""

*   To make test predictions

"""

from statsmodels.tsa.holtwinters import ExponentialSmoothing

fitted_model=ExponentialSmoothing(train['Close'],trend='mul',seasonal='mul',seasonal_periods=14).fit()

test_predictions=fitted_model.forecast(30).rename('HW Forecast')
test_predictions

"""

*   To plot test and train data split for closing price 
*   To plot test,train and prediction data of closing price


*   To plot test,train and predictions data of closing price in elaborated view
*   To make prediction on EWMA14 and SES14



"""

test['preds_exp']=test_predictions



"""

*   To plot test and train data split for closing price

"""

#exponential_test_error=mean_absolute_error(test['Close'],test['preds_exp'])**0.5

train['Close'].plot(legend=True,label='TRAIN')
test['Close'].plot(legend=True,label='TEST',figsize=(12,8))

train['Close'].plot(legend=True,label='TRAIN')
test['Close'].plot(legend=True,label='TEST',figsize=(20,10))

test_predictions.plot(legend=True, label='PREDICTION');

train['Close'].plot(legend=True,label='TRAIN')
test['Close'].plot(legend=True,label='TEST',figsize=(12,8))
test_predictions.plot(legend=True,label='PREDCITION',xlim=['2019-11-15','2021-01-01']);

train=df.iloc[:1120]
test=df.iloc[1120:]

train.columns

#y_train=train.drop(['High','Low','Open','Volume','Adj Close'],axis=1).values
X_train=np.arange(0,1120).reshape(-1,1)

len(X_train)==len(y_train)

model.fit(X_train,y_train)
#y_test=test.drop(['High','Low','Open','Volume','Adj Close'],axis=1).values
X_test=np.arange(0,30).reshape(-1,1)
pred=model.predict(X_test)

train

"""3. Decision Tree"""

from sklearn.tree import DecisionTreeRegressor

model = DecisionTreeRegressor()
# Fit/Train the model on the training data
model.fit(X_train, y_train)

y_train

pred=model.predict(X_test)
(test['Close'].values).shape
preds[1]
decision_test_error = mean_absolute_error(test['Close'].values, preds[:len(test['Close'].values)]) ** 0.5

preds

"""

*  To plot predictions and closing price on test data


"""

X_test=np.arange(0,29).reshape(-1,1)
preds=model.predict(X_test)
test['preds']=preds
test.plot()

"""

*   To plot predictions and closing  price on train data
"""

X_train=np.arange(0,1120).reshape(-1,1)
preds=model.predict(X_train)
train['preds']=preds
#train=train.drop(['High','Low','Open','Volume','Adj Close'],axis=1)
train.plot()

"""

*   Comparitive analysis based on RMSE

"""

exponential_test_error=mean_absolute_error(test['Close'],test['preds'])**0.5
data={'DecisionTree_RMSE':[decision_test_error],
      'ExponentialSmoothing_RMSE':[exponential_test_error],
      'LinearRegression_RMSE':[linear_regression_test_error]}
pf=pd.DataFrame(data)

pf